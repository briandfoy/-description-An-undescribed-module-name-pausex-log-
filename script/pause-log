use v5.36;
use open qw(:std :utf8);

=encoding utf8

=head1 NAME

pause-log -

=head1 SYNOPSIS

	% pause-log

=head1 DESCRIPTION

=head2 Options

=over 4

=item * --dist Foo-Bar-1.23.tgz

Filter the messages on this dist

=item * --duration N

Keep running for N seconds (default 3600)

=item * --format FORMAT

The format for output lines. See the L</Formatting> section for details.
(Default: C<%T %m>)

=item * --interval N

Sleep for N seconds between fetches (default 300)

=item * --once

Fetch once then stop

=item * --pause_id BDFOY

Filter messages on the given PAUSE ID

=item * --quiet

Suppress normal messages

=item * --types fetch,received,mldistwatch_start

Filter messages on these types (comma-separated)

The types are enqueue, fetch, get, renamed, received, entered,
verified, mldistwatch_start, reaped, and unknown. By default, all
types are shown.

=item * --verbose

Output extra information

=back

=head2 Formatting

=over 4

=item * %d - the dist name

=item * %D - the date, in YYYY-MM-DD

=item * %l - the log level

=item * %m - the log message

=item * %p - the PAUSE ID

=item * %t - the message type

=item * %T - the time

=back

=head1 TO DO

Nothing so far

=head1 SEE ALSO

Nothing so far

=head1 SOURCE AVAILABILITY

This source is in Github:

	http://github.com/briandfoy/pausex-log

=head1 AUTHOR

brian d foy, C<< <brian d foy> >>

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2023, brian d foy, All Rights Reserved.

You may redistribute this under the terms of the Artistic License 2.0.

=cut

$|++;
$SIG{INT} = sub { exit };

use PAUSEx::Log;

my $start = time;
FETCH: while(1) {
	state $opts = process_options();
	state %Seen;
	state $formatter = create_formatter();

	if( defined $opts->{duration} and $opts->{duration} > 0 ) {
		last FETCH if time - $start > $opts->{duration};
		}

	my $entries = PAUSEx::Log->fetch_log;
	say sprintf("Fetched %s entries", scalar $entries->@*) if $opts->{verbose};

	ENTRY: foreach my $entry ( $entries->@* ) {
		next if $Seen{ $entry->id }++;
		next if( defined $opts->{pause_id} and ! $entry->for_pause_id($opts->{pause_id}) );
		next if( keys $opts->{types}->%* and ! exists $opts->{types}{$entry->type} );
		say $formatter->sprintf( $opts->{'format'}, $entry );
		}

	last if $opts->{one_shot};

	for( my $i = 0; $i <= $opts->{interval}; $i++ ) {
		use builtin qw(floor);
		use experimental qw(builtin);
		my $grand = $opts->{interval} - $i;
		my $minutes = builtin::floor( $grand/60 );
		my $seconds = $grand % 60;
		printf( "Next fetch in %2d:%02d\r", $minutes, $seconds ) unless $opts->{quiet};
		sleep 1;
		}
	}

sub create_formatter () {
	state $rc = require String::Sprintf;
	no warnings qw(uninitialized);

	my $formatter = String::Sprintf->formatter(
		'd' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->distname;
            },
		'D' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->pause_id;
			},
		'l' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->level;
			},
		'm' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->message;
			},
		'p' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->pause_id;
			},
		't' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->type;
			},
		'T' => sub ($width, $value, $values, $letter) {
			sprintf "%${width}s", $values->[0]->time;
			},
		);
	}

sub process_options () {
	my $rc = require Getopt::Long;

	my %opts = (
		duration => 30 * 60,
		'format' => '%T %m',
		interval =>  5 * 60,
		once     => 0,
		quiet    => 0,
		verbose  => 0,
		);

	Getopt::Long::GetOptions(
		'dist=s'     => \$opts{dist},
		'duration=i' => \$opts{duration},
		'format=s'   => \$opts{'format'},
		'interval=i' => \$opts{interval},
		'once'       => \$opts{once},
		'pause_id=s' => \$opts{pause_id},
		'quiet'      => \$opts{quiet},
		'types=s'    => \$opts{types},
		'verbose'    => \$opts{verbose},
		);

	$opts{types} = { map { lc($_), 1 } split /\s*,\s*/, $opts{types} // '' };

	return \%opts;
	}
